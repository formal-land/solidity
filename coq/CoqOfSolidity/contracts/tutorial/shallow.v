(* Generated by shallow_embed.py *)
Require Import CoqOfSolidity.CoqOfSolidity.
Require Import CoqOfSolidity.simulations.CoqOfSolidity.
Import Stdlib.

Module Contract_16.
  Definition allocate_unbounded : M.t U256.t :=
    let~ '(_, memPtr) :=
      let memPtr := 0 in
      let~ memPtr := [[ mload ~(| 64 |) ]] in
      M.pure (BlockUnit.Tt, memPtr)
    in
    M.pure memPtr.

  Definition constructor_Contract_16 : M.t unit :=
    let~ '(_, tt) :=
      M.pure (BlockUnit.Tt, tt)
    in
    M.pure tt.

  Definition revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb : M.t unit :=
    let~ '(_, tt) :=
      do~ [[ revert ~(| 0, 0 |) ]] in
      M.pure (BlockUnit.Tt, tt)
    in
    M.pure tt.

  Definition body : M.t unit :=
    let~ '(_, result) :=
      do~ [[ mstore ~(| 64, memoryguard ~(| 128 |) |) ]] in
      let_state~ 'tt := [[
        Shallow.if_ (|
          callvalue ~(||),
          do~ [[ revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb ~(||) ]] in
          M.pure (BlockUnit.Tt, tt),
          tt
        |)
      ]] default~ tt in
      do~ [[ constructor_Contract_16 ~(||) ]] in
      let~ _1 := [[ allocate_unbounded ~(||) ]] in
      do~ [[ codecopy ~(| _1, dataoffset ~(| 0x436f6e74726163745f31365f6465706c6f796564000000000000000000000000 (* Contract_16_deployed *) |), datasize ~(| 0x436f6e74726163745f31365f6465706c6f796564000000000000000000000000 (* Contract_16_deployed *) |) |) ]] in
      do~ [[ return_ ~(| _1, datasize ~(| 0x436f6e74726163745f31365f6465706c6f796564000000000000000000000000 (* Contract_16_deployed *) |) |) ]] in
      M.pure (BlockUnit.Tt, tt)
    in
    M.pure result.

  Module Contract_16_deployed.
    Definition cleanup_t_uint256 (value : U256.t) : M.t U256.t :=
      let~ '(_, cleaned) :=
        let cleaned := 0 in
        let~ cleaned := [[ value ]] in
        M.pure (BlockUnit.Tt, cleaned)
      in
      M.pure cleaned.

    Definition validator_revert_t_uint256 (value : U256.t) : M.t unit :=
      let~ '(_, tt) :=
        let_state~ 'tt := [[
          Shallow.if_ (|
            iszero ~(| eq ~(| value, cleanup_t_uint256 ~(| value |) |) |),
            do~ [[ revert ~(| 0, 0 |) ]] in
            M.pure (BlockUnit.Tt, tt),
            tt
          |)
        ]] default~ tt in
        M.pure (BlockUnit.Tt, tt)
      in
      M.pure tt.

    Definition abi_decode_t_uint256 (offset : U256.t) (end_ : U256.t) : M.t U256.t :=
      let~ '(_, value) :=
        let value := 0 in
        let~ value := [[ calldataload ~(| offset |) ]] in
        do~ [[ validator_revert_t_uint256 ~(| value |) ]] in
        M.pure (BlockUnit.Tt, value)
      in
      M.pure value.

    Definition revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b : M.t unit :=
      let~ '(_, tt) :=
        do~ [[ revert ~(| 0, 0 |) ]] in
        M.pure (BlockUnit.Tt, tt)
      in
      M.pure tt.

    Definition abi_decode_tuple_t_uint256t_uint256 (headStart : U256.t) (dataEnd : U256.t) : M.t (U256.t * U256.t) :=
      let~ '(_, (value0, value1)) :=
        let '(value0, value1) := (0, 0) in
        let_state~ 'tt := [[
          Shallow.if_ (|
            slt ~(| sub ~(| dataEnd, headStart |), 64 |),
            do~ [[ revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b ~(||) ]] in
            M.pure (BlockUnit.Tt, tt),
            tt
          |)
        ]] default~ (value0, value1) in
        let_state~ value0 :=
          let~ offset := [[ 0 ]] in
          let~ value0 := [[ abi_decode_t_uint256 ~(| add ~(| headStart, offset |), dataEnd |) ]] in
          M.pure (BlockUnit.Tt, value0)
        default~ (value0, value1) in
        let_state~ value1 :=
          let~ offset := [[ 32 ]] in
          let~ value1 := [[ abi_decode_t_uint256 ~(| add ~(| headStart, offset |), dataEnd |) ]] in
          M.pure (BlockUnit.Tt, value1)
        default~ (value0, value1) in
        M.pure (BlockUnit.Tt, (value0, value1))
      in
      M.pure (value0, value1).

    Definition abi_encode_t_uint256_to_t_uint256_fromStack (value : U256.t) (pos : U256.t) : M.t unit :=
      let~ '(_, tt) :=
        do~ [[ mstore ~(| pos, cleanup_t_uint256 ~(| value |) |) ]] in
        M.pure (BlockUnit.Tt, tt)
      in
      M.pure tt.

    Definition abi_encode_tuple_t_uint256__to_t_uint256__fromStack (headStart : U256.t) (value0 : U256.t) : M.t U256.t :=
      let~ '(_, tail) :=
        let tail := 0 in
        let~ tail := [[ add ~(| headStart, 32 |) ]] in
        do~ [[ abi_encode_t_uint256_to_t_uint256_fromStack ~(| value0, add ~(| headStart, 0 |) |) ]] in
        M.pure (BlockUnit.Tt, tail)
      in
      M.pure tail.

    Definition allocate_unbounded : M.t U256.t :=
      let~ '(_, memPtr) :=
        let memPtr := 0 in
        let~ memPtr := [[ mload ~(| 64 |) ]] in
        M.pure (BlockUnit.Tt, memPtr)
      in
      M.pure memPtr.

    Definition panic_error_0x11 : M.t unit :=
      let~ '(_, tt) :=
        do~ [[ mstore ~(| 0, 35408467139433450592217433187231851964531694900788300625387963629091585785856 |) ]] in
        do~ [[ mstore ~(| 4, 0x11 |) ]] in
        do~ [[ revert ~(| 0, 0x24 |) ]] in
        M.pure (BlockUnit.Tt, tt)
      in
      M.pure tt.

    Definition checked_add_t_uint256 (x : U256.t) (y : U256.t) : M.t U256.t :=
      let~ '(_, (sum, x, y)) :=
        let sum := 0 in
        let~ x := [[ cleanup_t_uint256 ~(| x |) ]] in
        let~ y := [[ cleanup_t_uint256 ~(| y |) ]] in
        let~ sum := [[ add ~(| x, y |) ]] in
        let_state~ 'tt := [[
          Shallow.if_ (|
            gt ~(| x, sum |),
            do~ [[ panic_error_0x11 ~(||) ]] in
            M.pure (BlockUnit.Tt, tt),
            tt
          |)
        ]] default~ (sum, x, y) in
        M.pure (BlockUnit.Tt, (sum, x, y))
      in
      M.pure sum.

    Definition zero_value_for_split_t_uint256 : M.t U256.t :=
      let~ '(_, ret) :=
        let ret := 0 in
        let~ ret := [[ 0 ]] in
        M.pure (BlockUnit.Tt, ret)
      in
      M.pure ret.

    Definition fun_add_15 (var_a_3 : U256.t) (var_b_5 : U256.t) : M.t U256.t :=
      let~ '(_, var__8) :=
        let var__8 := 0 in
        let~ zero_t_uint256_1 := [[ zero_value_for_split_t_uint256 ~(||) ]] in
        let~ var__8 := [[ zero_t_uint256_1 ]] in
        let~ _2 := [[ var_a_3 ]] in
        let~ expr_10 := [[ _2 ]] in
        let~ _3 := [[ var_b_5 ]] in
        let~ expr_11 := [[ _3 ]] in
        let~ expr_12 := [[ checked_add_t_uint256 ~(| expr_10, expr_11 |) ]] in
        let~ var__8 := [[ expr_12 ]] in
        M.pure (BlockUnit.Leave, var__8)
      in
      M.pure var__8.

    Definition revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb : M.t unit :=
      let~ '(_, tt) :=
        do~ [[ revert ~(| 0, 0 |) ]] in
        M.pure (BlockUnit.Tt, tt)
      in
      M.pure tt.

    Definition external_fun_add_15 : M.t unit :=
      let~ '(_, tt) :=
        let_state~ 'tt := [[
          Shallow.if_ (|
            callvalue ~(||),
            do~ [[ revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb ~(||) ]] in
            M.pure (BlockUnit.Tt, tt),
            tt
          |)
        ]] default~ tt in
        let~ '(param_0, param_1) := [[ abi_decode_tuple_t_uint256t_uint256 ~(| 4, calldatasize ~(||) |) ]] in
        let~ ret_0 := [[ fun_add_15 ~(| param_0, param_1 |) ]] in
        let~ memPos := [[ allocate_unbounded ~(||) ]] in
        let~ memEnd := [[ abi_encode_tuple_t_uint256__to_t_uint256__fromStack ~(| memPos, ret_0 |) ]] in
        do~ [[ return_ ~(| memPos, sub ~(| memEnd, memPos |) |) ]] in
        M.pure (BlockUnit.Tt, tt)
      in
      M.pure tt.

    Definition revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74 : M.t unit :=
      let~ '(_, tt) :=
        do~ [[ revert ~(| 0, 0 |) ]] in
        M.pure (BlockUnit.Tt, tt)
      in
      M.pure tt.

    Definition revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db : M.t unit :=
      let~ '(_, tt) :=
        do~ [[ revert ~(| 0, 0 |) ]] in
        M.pure (BlockUnit.Tt, tt)
      in
      M.pure tt.

    Definition shift_right_224_unsigned (value : U256.t) : M.t U256.t :=
      let~ '(_, newValue) :=
        let newValue := 0 in
        let~ newValue := [[ shr ~(| 224, value |) ]] in
        M.pure (BlockUnit.Tt, newValue)
      in
      M.pure newValue.

    Definition body : M.t unit :=
      let~ '(_, result) :=
        do~ [[ mstore ~(| 64, memoryguard ~(| 128 |) |) ]] in
        let_state~ 'tt := [[
          Shallow.if_ (|
            iszero ~(| lt ~(| calldatasize ~(||), 4 |) |),
            let~ selector := [[ shift_right_224_unsigned ~(| calldataload ~(| 0 |) |) ]] in
            let_state~ 'tt := [[
              (* switch *)
              let~ δ := [[ selector ]] in
              if δ =? 0x771602f7 then
                do~ [[ external_fun_add_15 ~(||) ]] in
                M.pure (BlockUnit.Tt, tt)
              else
                M.pure (BlockUnit.Tt, tt)
            ]] default~ tt in
            M.pure (BlockUnit.Tt, tt),
            tt
          |)
        ]] default~ tt in
        do~ [[ revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74 ~(||) ]] in
        M.pure (BlockUnit.Tt, tt)
      in
      M.pure result.
  End Contract_16_deployed.
End Contract_16.
